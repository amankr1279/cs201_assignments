char s[100];
    int i=0;
    int avl_flag = 0;
    scanf("%[^\n]s",s);
    int l = eff_len(s);
    cout << s << "  Len:" << l<< endl;
    node* root = NULL;
    if(s[0] == 'T')
    {
        //BST
        i++;avl_flag = 0;
        while(i < l)
        {
            int num=0,del_flag=0;
            if(s[i] == ' ')
                i++;
            if(s[i] =='-')
            {
                i++;del_flag = 1;
            }
            while (s[i] >= '0' && s[i] <= '9')
            {
                num = num*10 + s[i] - '0';i++;
            }
            if(del_flag)
            {
                // delete num
                cout<<"Delete Number:"<<num<<" i:"<< i << endl;
                root = deleteNode(root,num,avl_flag);
            }
            else
            {
                //insert num
                cout<<"Insert Number:"<<num<<" i:"<< i << endl;
                root = insert(root,num,avl_flag);
            }
            num = 0,del_flag=0;
            i=i+1;
        }
    }
    else if (s[0] =='H')
    {
        //AVL
        i++; avl_flag  = 1;
        while(i < l)
        {
            int num=0,del_flag=0;
            if(s[i] == ' ')
                i++;
            if(s[i] =='-')
            {
                i++;del_flag = 1;
            }
            while (s[i] >= '0' && s[i] <= '9')
            {
                num = num*10 + s[i] - '0';i++;
            }
            if(del_flag)
            {
                // delete num
                cout<<"Delete Number:"<<num<<" i:"<< i << endl;
                root = deleteNode(root,num,avl_flag);
            }
            else
            {
                //insert num
                cout<<"Insert Number:"<<num<<" i:"<< i << endl;
                root = insert(root,num,avl_flag);
            }
            num = 0,del_flag=0;
            i=i+1;
        }
    }
    else if (s[0] =='A')
    {
        //Add to last tree
        i++;
        while(i < l)
        {
            int num=0;
            if(s[i] == ' ')
                i++;
            while (s[i] >= '0' && s[i] <= '9')
            {
                num = num*10 + s[i] - '0';i++;
            }
            //insert num
            cout<<"Insert Number:"<<num<<" i:"<< i << endl;
            root = insert(root,num,avl_flag);
            num = 0;
            i=i+1;
        }
    }
    else if (s[0] =='U')
    {
        //Uproot last tree
        i++;
        while(i < l)
        {
            int num=0;
            if(s[i] == ' ')
                i++;
            while (s[i] >= '0' && s[i] <= '9')
            {
                num = num*10 + s[i] - '0';i++;
            }
            //insert num
            cout<<"Delete Number:"<<num<<" i:"<< i << endl;
            root = deleteNode(root,num,avl_flag);
            num = 0;
            i=i+1;
        }
    }
    else if (s[0] =='F')
    {
        //Find
        i++;
        while(i < l)
        {
            int num=0;
            if(s[i] == ' ')
                i++;
            while (s[i] >= '0' && s[i] <= '9')
            {
                num = num*10 + s[i] - '0';i++;
            }
            //insert num
            cout<<"Insert Number:"<<num<<" i:"<< i << endl;
            num = 0;
            i=i+1;
        }
    }
    else if (s[0] =='Q')
    {
        //ouput no. of leaves
    }
    else if (s[0] =='N')
    {
        //ouput no. of nodes
    }
    else if (s[0] =='P')
    {
        //print preorder traversal non recursive
    }
    else if (s[0] =='I')
    {
        //Print Inorder traversal
    }
    else if (s[0] =='S')
    {
        //Postorder traversal
    }
    else if (s[0] =='L')
    {
        //print tree level order traversal
    }
    else if (s[0] =='D')
    {
        //depth/height of tree
        cout << root->height << endl;
    }
    else if (s[0] =='W')
    {
        //width of tree
    }
    else if (s[0] =='C')
    {
        //lowest common ancestor
    }
    else if (s[0] =='R')
    {
        //route/path of 2 nodes
        i++; int a[2],j=0;
        while(i < l)
        {
            int num=0;
            if(s[i] == ' ')
                i++;
            while (s[i] >= '0' && s[i] <= '9')
            {
                num = num*10 + s[i] - '0';i++;
            }
            //insert num
            a[j] = num;
            cout<<"Insert Number:"<<a[j]<<" and j:" << j << endl;
            num = 0;j++;
            i=i+1;
        }
    }
    else if (s[0] =='X')
    {
        //legth of diameter of treee
    }
    else if (s[0] =='Y')
    {
        //print perimeter of tree
    }

    printInorder(root);
    cout <<endl;